{
  "_args": [
    [
      "test-npm-update@git://github.com/pauldijou/test-npm-update.git#v1.0.1",
      "/home/paul/Work/projects/outdated/test/github"
    ]
  ],
  "_from": "git://github.com/pauldijou/test-npm-update.git#v1.0.1",
  "_id": "test-npm-update@1.0.1",
  "_inCache": true,
  "_location": "/test-npm-update",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/pauldijou/test-npm-update/v1.0.1/package.json",
      "gitUrl": "git://github.com/pauldijou/test-npm-update.git#v1.0.1",
      "httpsUrl": "git+https://github.com/pauldijou/test-npm-update.git#v1.0.1",
      "shortcut": "github:pauldijou/test-npm-update#v1.0.1",
      "ssh": "git@github.com:pauldijou/test-npm-update.git#v1.0.1",
      "sshUrl": "git+ssh://git@github.com/pauldijou/test-npm-update.git#v1.0.1",
      "type": "github"
    },
    "name": "test-npm-update",
    "raw": "test-npm-update@git://github.com/pauldijou/test-npm-update.git#v1.0.1",
    "rawSpec": "git://github.com/pauldijou/test-npm-update.git#v1.0.1",
    "scope": null,
    "spec": "git://github.com/pauldijou/test-npm-update.git#v1.0.1",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/pauldijou/test-npm-update.git#2596918c8b8d98809d534ef0fb6f2e66ff2ddfbd",
  "_shasum": "2a0579fdb43692b79c5699a0e368201042bab011",
  "_shrinkwrap": null,
  "_spec": "test-npm-update@git://github.com/pauldijou/test-npm-update.git#v1.0.1",
  "_where": "/home/paul/Work/projects/outdated/test/github",
  "bugs": {
    "url": "https://github.com/pauldijou/test-npm-update/issues"
  },
  "dependencies": {},
  "description": "An empty package to test npm update",
  "devDependencies": {},
  "gitHead": "2596918c8b8d98809d534ef0fb6f2e66ff2ddfbd",
  "homepage": "https://github.com/pauldijou/test-npm-update#readme",
  "name": "test-npm-update",
  "optionalDependencies": {},
  "readme": "# Test Update\n\nThis package only exists to test a strange behaviour inside NPM.\n\n## tl;dr\n\nDo not use `npm update` with any package which use custom dist-tags.\n\n## Dist-tags\n\nThis package has officially those 3 last versions: `1.0.0`, `1.0.1` and `1.0.2`. But inside the `dist-tags` ([read more](https://docs.npmjs.com/cli/dist-tag)), we have two of them: the classic `latest` which refers to the latest stable release of the package and a custom one, named `canary`, indicating the last non-stable release of the package. If you are wondering if real projects are using such tags, the answer is **yes**, the `npm` package is using `latest` and `next` tags for it's weekly pre-release ([read more](https://github.com/npm/npm/wiki/Release-Process)).\n\nCurrently, `latest` points to `1.0.1` and `canary` to `1.0.2`. Meaning that if you run `npm view test-npm-update`, you will have something like:\n\n```javascript\n{\n  name: 'test-npm-update',\n  description '...',\n  'dist-tags': { latest: '1.0.1', canary: '1.0.2' },\n  versions: ['1.0.0', '1.0.1', '1.0.2'],\n  version: '1.0.1',\n  ...\n}\n```\n\n## Versions\n\nIt's important to realize a few things here. `1.0.2` is a released version just as `1.0.0` and `1.0.1` and we will say it's the **greatest** one (as in the biggest number according to semver) but not the **latest** one (as in the one tagged with the `latest` dist-tag). We need to make such distinction to fully understand what will happen after that.\n\nSo, when you run `npm view test-npm-update`, it actually runs `npm view test-npm-update@latest`, meaning it will grab the informations of the **latest** version. But maybe some other versions have been released with a custom tag after this one. For me, so far, so good. NPM is doing exactly what I would expect. If I want a custom release such as the canary one, I can run `npm view test-npm-update@canary` and it will display infos about the `1.0.2` version. In fact, but I might be wrong but I except NPM to always use the **latest** version (aka the `latest` dist-tag) by default if I don't specify anything. That's what you can mostly read all over the NPM documentation.\n\nBut remember, `1.0.2` is inside the `versions` array just like any other version. So first warning, if you use such metadata for whatever stuff you are doing, do not assume that the **greatest** version inside the `versions` array is the **latest** one.\n\n## Install\n\nNow, what if I run `npm install test-npm-update`? What would you expect to be installed? `1.0.1`right? And of course it will be this version, the **latest** one. That's normal, after all, **latest** is the default one. All good here.\n\nWhat if I clean my folder and then run `npm install test-npm-update@^1.0.0`? Guess what, `1.0.1` will be installed. And I'm totally ok with that. I asked for the best 1.x.x version and I'm glad to have the **latest** one since it matches.\n\n## package.json\n\nBut most of the time, you don't install or update from command line, you have a `package.json` file with a range inside it. Let's say we have the following one:\n\n```json\n{\n  \"name\": \"awesome-project\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"test-npm-update\": \"^1.0.0\"\n  }\n}\n```\n\nPretty classic, right? Now, for the purpose of the demo, let's say we currently have the `1.0.0` version of `test-npm-update` locally installed. If you want to reproduce, just create an empty folder, then create a `package.json` inside it with the previous content and run `npm install test-npm-update@1.0.0` to force the install of an old version.\n\nDone? Cool, let's move forward. NPM has a command to test if you have outdated versions locally installed. Which is our case. Let's check that by running `npm outdated`. You should have something like:\n\n```\nPackage          Current  Wanted  Latest  Location\ntest-npm-update  1.0.0    1.0.2   1.0.1\n```\n\nWait a minute? I'm ok with *current* (the locally installed) being `1.0.0` and *latest* (matching the dist-tag) being `1.0.1` but *wanted* is supposed to be the best matching version I should install according to `package.json`. How can it be greater than *latest*?\n\nActually, it's all ok according to the NPM documentation. After all, the `package.json` range is `^1.0.0` which means the greatest possible version without changing the first non-zero digit. And among **all** our versions (see the `versions` array from `npm view`), both `1.0.1` and `1.0.2` match this range, but since `1.0.2` is greater than `1.0.1`, the *wanted* version is `1.0.2`.\n\nI didn't expect that to be honest. That's not wrong but I can't help myself finding that strange.\n\n## Install again\n\nQuick mention to the fact that if I run `npm install` with my `package.json` in an empty folder (aka without the `1.0.0` version already installed), it will still install `1.0.1` version. That's ok according to **latest** being the default one. Back to our outdated `1.0.0` version.\n\n## Update\n\nThings start to get really ugly now. So, `npm outdated` just told me I have an old local version. I should probably update it, and NPM has a command for that. Let's run `npm update`. To be honest, I wasn't sure anymore what would be installed locally. I mean, I would have normally expected the `1.0.1` version. My brain was like \"It should be the greatest **stable** version which match the range\", with **stable** meaning lower or equal to the `latest` tag, but for NPM, it's more like \"It should be the greatest version which match the range. Period.\". And it makes all the difference. My brain stops at `1.0.1` as the latest stable but NPM browse **all** version, including any custom dist-tags, including the `canary` version.\n\nAt the end, running `npm update` will install `1.0.2` version. This is **wrong**. According to [documentation](https://docs.npmjs.com/cli/update):\n\n> This command will update all the packages listed to the latest version (specified by the tag config), respecting semver.\n\nI read that as the **latest** version according to `latest` dist-tag. But we just updated to a version beyond this **latest** version. In any case, this is super dangerous! It means you can update to non-stable versions without even noticing it.\n\nWhat if we didn't have the `1.0.0` already installed? Since `npm update` also install missing packages, it will indeed install `test-npm-update` according to `package.json` and, of course, to the `1.0.2` version.\n\n## Conclusion\n\nIMHO, I think this is way too dangerous, `npm update` should be capped by the **latest** version, and so should `npm outdated`. By default, no command should target versions beyond `latest` dist-tag. Also, it seems inconsistent to have `install` and `update` both capable of installing a missing package from a `package.json` file but not to the same version.\n\nI raised an issue on [Github](https://github.com/npm/npm/issues/8476), we will see. Be careful from now on.\n\nThanks for reading! Spread the word.\n\n## Personal ad\n\nIt might be a bit too early to speak about that, but if you need an `outdated` command which is actually capped by the `latest` tag and also support other package managers (like Bower), please check my [outdated](https://github.com/pauldijou/outdated) project. It's not ready at all yet but it will be in the next few days, promise.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pauldijou/test-npm-update.git"
  },
  "version": "1.0.1"
}
